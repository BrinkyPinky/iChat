//
//  ConversationViewController.swift
//  iChat
//
//  Created by Егор Шилов on 05.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConversationDisplayLogic: AnyObject {
    func displayFullname(viewModel: Conversation.fullnameLabel.ViewModel)
    func displayMessages(viewModel: Conversation.Messages.ViewModel)
}

class ConversationViewController: UIViewController, ConversationDisplayLogic {
        
    let someExampleArray = ["Privet kak dela epgta?ewqjeiqwjeiqwjieqwjieqwi wqjie iqw ij ieqwj qw ji jqwi", "Hellooo!!!!", "HIIII!!!!!", "I", "Privet kak dela epgta?", "Hellooo!!!!", "HIIII!!!!!", "I", "Privet kak dela epgta?", "Hellooo!!!!", "HIIII!!!!!", "I", "Privet kak dela epgta?", "Hellooo!!!!", "HIIII!!!!!", "I"]
    
    @IBOutlet var conversationCollectionView: UICollectionView!
    @IBOutlet var inputMessageToolBar: UIToolbar!
    let messageTextView = UITextView() //logic in file (Extension + TextFieldDelegate)
    let sendMessageButton = UIButton()
    let stackViewForToolBar = UIStackView()
    
    var interactor: ConversationBusinessLogic?
    var router: (NSObjectProtocol & ConversationRoutingLogic & ConversationDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI() //in file (Extension + Appearance)
    }
    
    
    override func viewWillAppear(_ animated: Bool) {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(self.onKeyboardWillChangeFrame),
            name: UIResponder.keyboardWillChangeFrameNotification,
            object: nil
        ) //in file (Extension + Keyboard)
//        conversationCollectionView.scrollToItem(at: IndexPath(item: 10, section: 0), at: .centeredVertically, animated: true)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        NotificationCenter.default.removeObserver(
            self,
            name: UIResponder.keyboardWillChangeFrameNotification,
            object: nil
        )  //in file (Extension + Keyboard)
        
        self.tabBarController?.tabBar.isHidden = false
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Display FullName
    
    func displayFullname(viewModel: Conversation.fullnameLabel.ViewModel) {
        title = viewModel.fullname
    }
    
    // MARK: Display Messages
    
    var messagesRows: [[CellIdentifiable]] = [[]]
    var dates: [String] = []
    
    func displayMessages(viewModel: Conversation.Messages.ViewModel) {
        messagesRows = viewModel.messagesRows
        print(messagesRows)
        dates = viewModel.headersDate
        
        DispatchQueue.main.async {
            self.conversationCollectionView.reloadData()
        }
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ConversationInteractor()
        let presenter = ConversationPresenter()
        let router = ConversationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

// MARK: Content of CollectionView

extension ConversationViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        messagesRows.count
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        case UICollectionView.elementKindSectionHeader:
            let headerView = collectionView.dequeueReusableSupplementaryView(
                ofKind: kind,
                withReuseIdentifier: "MessageHeader",
                for: indexPath
            ) as! ConversationCollectionHeaderView
            
            return headerView
        default:
            fatalError("Unexpected element kind")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
//        guard messagesRows[section].count != 0 else { return 0}
//        guard let rows = messagesRows[section].count else { return 0 }
        return messagesRows[section].count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let messageCellModel = messagesRows[indexPath.section][indexPath.row]
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: messageCellModel.cellIdentifier, for: indexPath) as! ConversationCollectionViewCell
        
        cell.messageCellModel = messageCellModel
        
        return cell
    }
}
