//
//  ConversationPresenter.swift
//  iChat
//
//  Created by Егор Шилов on 05.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConversationPresentationLogic {
    func presentUserFullname(response: Conversation.fullnameLabel.Response)
    func presentMessages(response: Conversation.messages.Response)
}

class ConversationPresenter: ConversationPresentationLogic {
    
    weak var viewController: ConversationDisplayLogic?
    
    // MARK: presentUserFullName
    
    func presentUserFullname(response: Conversation.fullnameLabel.Response) {
        let viewModel = Conversation.fullnameLabel.ViewModel(fullname: response.fullname)
        viewController?.displayFullname(viewModel: viewModel)
    }
    
    func presentMessages(response: Conversation.messages.Response) {
        var referenceDateToCompare: String?
        
        var headersDate = [String]()
        var sortedMessages = [[MessageModel]]()
        var firstLevelMessages = [MessageModel]()
        
        response.rawMessages.forEach { messageModel in
            let timeInterval = TimeInterval(messageModel.date)
            var convertedDateValue = Date(timeIntervalSinceReferenceDate: timeInterval ?? 0)
            let secondsFromGMT = TimeZone.current.secondsFromGMT()
            convertedDateValue.addTimeInterval(TimeInterval(secondsFromGMT))
            
            let dayOfDate = convertedDateValue.formatted(date: .numeric, time: .omitted)
            
            
            if referenceDateToCompare == nil {
                referenceDateToCompare = dayOfDate
                headersDate.append(convertedDateValue.formatted(date: .complete, time: .omitted))
            }
            
            if dayOfDate == referenceDateToCompare {
                firstLevelMessages.append(
                    MessageModel(
                        messageText: messageModel.messageText,
                        date: convertedDateValue.formatted(date: .omitted, time: .shortened),
                        isRead: messageModel.isRead,
                        selfSender: messageModel.selfSender
                    )
                )
            } else {
                sortedMessages.append(firstLevelMessages)
                firstLevelMessages = []
                referenceDateToCompare = dayOfDate
                headersDate.append(convertedDateValue.formatted(date: .complete, time: .omitted))
                
                firstLevelMessages.append(
                    MessageModel(
                        messageText: messageModel.messageText,
                        date: convertedDateValue.formatted(date: .omitted, time: .shortened),
                        isRead: messageModel.isRead,
                        selfSender: messageModel.selfSender
                    )
                )
            }
        }
        
        sortedMessages.append(firstLevelMessages)
        print(sortedMessages)
        print(headersDate)
    }
}
